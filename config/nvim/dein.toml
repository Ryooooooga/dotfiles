### editorconfig-vim ###
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

### vim-airline ###
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_powerline_fonts = 1
let g:airline_theme = 'deus'
let g:airline_symbols = {
\   'branch': "\uf418",
\   'dirty': "\u00b1",
\ }
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = ['vim-airline']

### colorschemes ###
[[plugins]]
repo = 'tomasiser/vim-code-dark'
hook_add = '''
colorscheme codedark
'''

[[plugins]]
repo = 'romgrk/doom-one.vim'

### vim-gitgutter ###
[[plugins]]
repo = 'airblade/vim-gitgutter'

### vim-fugitive ###
[[plugins]]
repo = 'tpope/vim-fugitive'

### defx.nvim ###
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
        \ !defx#is_directory()
        \   ? defx#do_action('drop')
        \   : defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> o
        \ !defx#is_directory()
        \   ? defx#do_action('drop')
        \   : defx#is_opened_tree() ? defx#do_action('close_tree') : defx#do_action('open_tree_recursive')
    nnoremap <silent><buffer><expr> h       defx#do_action('close_tree')
    nnoremap <silent><buffer><expr> l       defx#do_action('open_tree')
    nnoremap <silent><buffer><expr> <Left>  defx#do_action('close_tree')
    nnoremap <silent><buffer><expr> <Right> defx#do_action('open_tree')
    nnoremap <silent><buffer><expr> r       defx#do_action('redraw')
    nnoremap <silent><buffer><expr> d       defx#do_action('remove')
    nnoremap <silent><buffer><expr> c       defx#do_action('copy')
    nnoremap <silent><buffer><expr> p       defx#do_action('paste')
    nnoremap <silent><buffer><expr> m       defx#do_action('move')
    nnoremap <silent><buffer><expr> n       defx#do_action('new_file')
    nnoremap <silent><buffer><expr> N       defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> q       defx#do_action('quit')
    nnoremap <silent><buffer><expr> .       defx#do_action('toggle_ignored_files')
endfunction

call defx#custom#option('_', {
\   'columns': 'space:indent:git:icons:filename:type',
\   'direction': 'topleft',
\   'split': 'vertical',
\   'winwidth': 32,
\ })

nnoremap <silent><C-o> <cmd>Defx -toggle -show-ignored-files<CR>
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
depends = ['defx.nvim']

[[plugins]]
repo = 'kristijanhusak/defx-icons'
depends = ['defx.nvim']

### lexima.vim ###
[[plugins]]
repo = 'cohama/lexima.vim'

### vim-json ###
[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
set conceallevel=2
set concealcursor=niv
let g:vim_json_syntax_conceal = 0
'''

### nerdcommenter ###
[[plugins]]
repo = 'preservim/nerdcommenter'
hook_add = '''
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'

nmap <C-c> <Plug>NERDCommenterToggle
vmap <C-c> <Plug>NERDCommenterToggle<CR>gv
'''

### fzf-preview.vim ###
[[plugins]]
repo = 'junegunn/fzf'
build = 'bash install'

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'yuki-ycino/fzf-preview.vim'
rev = 'release/rpc'
hook_add = '''
nnoremap <silent>//     <cmd>FzfPreviewLinesRpc<CR>
nnoremap <silent><C-f>  <cmd>FzfPreviewBufferLinesRpc<CR>
nnoremap <silent><C-p>  <cmd>FzfPreviewProjectFilesRpc<CR>
'''

### completion-nvim ###
[[plugins]]
repo = 'nvim-lua/completion-nvim'

### nvim-lspconfig ###
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['completion-nvim']
hook_add = '''
set completeopt=menuone,noinsert
set shortmess+=c
let g:completion_enable_auto_popup = 1

" C/C++
lua require'lspconfig'.clangd.setup{}

nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> <C-f> <cmd>lua vim.lsp.buf.formatting()<CR>
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
'''

### nvim-treesitter ###
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 1
# hook_post_update = 'TSUpdate'
hook_add = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = "maintained",
    highlight = {
        enable = true,
        disable = {
            'rst',
            'nix',
        },
    },
}
EOF
'''

### barbar.nvim ###
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'romgrk/barbar.nvim'

### scrollbar.nvim ###
[[plugins]]
repo = 'Xuyuanp/scrollbar.nvim'
hook_add = '''
let g:scrollbar_max_size = 30

let g:scrollbar_shape = {
\ 'head': '█',
\ 'body': '█',
\ 'tail': '█',
\ }

let g:scrollbar_highlight = {
\ 'head': 'Scrollbar',
\ 'body': 'Scrollbar',
\ 'tail': 'Scrollbar',
\ }

augroup Scrollbar
  autocmd!
  autocmd CursorMoved,VimResized,QuitPre * silent! lua require('scrollbar').show()
  autocmd WinEnter,BufEnter,FocusGained  * silent! lua require('scrollbar').show()
  autocmd WinLeave,BufLeave,FocusLost    * silent! lua require('scrollbar').clear()
augroup end
'''
