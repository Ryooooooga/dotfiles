<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>l</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~L</string>
	<key>name</key>
	<string>Lex/Flex</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>\A(?!%%$)</string>
			<key>comment</key>
			<string>first section of the file - definitions</string>
			<key>end</key>
			<string>^(?=%%$)</string>
			<key>name</key>
			<string>meta.section.definitions.lex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#includes</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>end</key>
					<string>\*/|$</string>
					<key>name</key>
					<string>comment.block.c.lex</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(?i)([a-z_][a-z0-9_-]*)(?=\s|$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.lex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>meta.definition.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(%[sx])(?=\s|$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.start-condition.lex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>meta.start-condition.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?i)[a-z_][a-z0-9_-]*</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\S</string>
							<key>name</key>
							<string>invalid.illegal.lex</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(%option)\s(?=\S)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.option.lex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>meta.options.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b(?:(?:no)?(?:[78]bit|align|backup|batch|c\+\+|debug|default|ecs|fast|full|interactive|lex-compat|meta-ecs|perf-report|read|stdout|verbose|warn|array|pointer|input|unput|yy_(?:(?:push|pop|top)_state|scan_(?:buffer|bytes|string))|main|stack|stdinit|yylineno|yywrap)|(?:case(?:ful|less)|case-(?:in)?sensitive|(?:always|never)-interactive))\b</string>
							<key>name</key>
							<string>support.other.option.lex</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^%(?:array|pointer)</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>keyword.other.option.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\S</string>
							<key>name</key>
							<string>invalid.illegal.lex</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(%%)$</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.sections.lex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\Z.\A(?# never end)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^(?!%%$)</string>
					<key>comment</key>
					<string>second section of the file - rules</string>
					<key>end</key>
					<string>^(?=%%$)</string>
					<key>name</key>
					<string>meta.section.rules.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>^(?!$)</string>
							<key>end</key>
							<string>$</string>
							<key>name</key>
							<string>meta.rule.lex</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#includes</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?i)^(&lt;(?:(?:[a-z_][a-z0-9_-]*,)*[a-z_][a-z0-9_-]|\*)&gt;)?(?:(&lt;&lt;EOF&gt;&gt;)(\s*))?(?=\S)</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.other.start-condition.lex</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.eof.lex</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>invalid.illegal.regexp.lex</string>
										</dict>
									</dict>
									<key>comment</key>
									<string>rule pattern</string>
									<key>end</key>
									<string>(?=\s)|$</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#regexp</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(%\{)</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.code.lex</string>
										</dict>
									</dict>
									<key>comment</key>
									<string>TODO: %} should override embedded scopes</string>
									<key>end</key>
									<string>(%\})(.*)</string>
									<key>endCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>punctuation.terminator.code.lex</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>invalid.illegal.ignored.lex</string>
										</dict>
									</dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#csource</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?=\S)</string>
									<key>comment</key>
									<string>TODO: eol should override embedded scopes</string>
									<key>end</key>
									<string>$</string>
									<key>name</key>
									<string>meta.rule.action.lex</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#csource</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(%%)$</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.sections.lex</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>third section of the file - user code</string>
					<key>contentName</key>
					<string>meta.section.user-code.lex</string>
					<key>end</key>
					<string>\Z.\A(?# never end)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#csource</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>csource</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:ECHO|BEGIN|REJECT|YY_FLUSH_BUFFER|YY_BREAK|yy(?:more|less|unput|input|terminate|text|leng|restart|_(?:push|pop|top)_state|_(?:create|switch_to|flush|delete)_buffer|_scan_(?:string|bytes|buffer)|_set_(?:bol|interactive))(?=\(|$))\b</string>
					<key>name</key>
					<string>support.function.c.lex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.c</string>
				</dict>
			</array>
		</dict>
		<key>includes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^%\{$</string>
					<key>comment</key>
					<string>TODO: $} should override the embedded scopes</string>
					<key>end</key>
					<string>^%\}$</string>
					<key>name</key>
					<string>meta.embedded.source.c.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.c</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^[ \t]+</string>
					<key>comment</key>
					<string>TODO: eol should override the embedded scopes</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>meta.embedded.source.c.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.c</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>re_escape</key>
		<dict>
			<key>match</key>
			<string>\\(?i:[0-9]{1,3}|x[0-9a-f]{1,2}|.)</string>
			<key>name</key>
			<string>constant.character.escape.lex</string>
		</dict>
		<key>rec_csource</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#csource</string>
				</dict>
			</array>
		</dict>
		<key>regexp</key>
		<dict>
			<key>begin</key>
			<string>\G(?=\S)(\^)?</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.anchor.regexp.lex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\$)?(?:(?=\s)|$)</string>
			<key>name</key>
			<string>string.regexp.lex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#subregexp</string>
				</dict>
			</array>
		</dict>
		<key>subregexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#re_escape</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)(\^)?-?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.set.lex</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.negation.regexp.lex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>-?(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.terminator.character-class.set.lex</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.character-class.set.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#re_escape</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>invalid.illegal.regexp.lex</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\[:(?:(?:alnum|alpha|blank|cntrl|x?digit|graph|lower|print|punct|space|upper)|(.*?)):\]</string>
							<key>name</key>
							<string>constant.other.character-class.set.lex</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i){[a-z_][a-z0-9_-]*}</string>
					<key>name</key>
					<string>variable.other.lex</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>keyword.operator.quantifier.regexp.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&lt;=\{)[0-9]*(?:,[0-9]*)?(?=\})</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>{3} counts should only have digit[,digit]</string>
							<key>match</key>
							<string>[^}]</string>
							<key>name</key>
							<string>invalid.illegal.regexp.lex</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.regexp.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#re_escape</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([*+?])(?=[*+?])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.quantifier.regexp.lex</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>make ** or +? or other combinations illegal</string>
					<key>end</key>
					<string>(?=[^*+?])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>.</string>
							<key>name</key>
							<string>invalid.illegal.regexp.lex</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>[*+?]</string>
					<key>name</key>
					<string>keyword.operator.quantifier.regexp.lex</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>&lt;&lt;EOF&gt;&gt; is handled in the rule pattern</string>
					<key>match</key>
					<string>&lt;&lt;EOF&gt;&gt;</string>
					<key>name</key>
					<string>invalid.illegal.regexp.lex</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp.lex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))|(?=\s)|$(?#end on whitespace because regex does)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.terminator.group.regexp.lex</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.regexp.lex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>/</string>
							<key>name</key>
							<string>invalid.illegal.regexp.lex</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#subregexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.trailing-match.regexp.lex</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>detection of multiple trailing contexts</string>
					<key>end</key>
					<string>(?=\s)|$</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>/|\$(?!\S)</string>
							<key>name</key>
							<string>invalid.illegal.regexp.lex</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#subregexp</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.lex</string>
	<key>uuid</key>
	<string>92E842A0-9DE6-4D31-A6AC-1CDE0F9547C5</string>
</dict>
</plist>
